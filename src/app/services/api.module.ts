/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { ApiConfiguration, ApiConfigurationParams } from './api-configuration';

import { UserNotificationPreferencesControllerService } from './services/user-notification-preferences-controller.service';
import { TransactionControllerService } from './services/transaction-controller.service';
import { ScheduledTransferControllerService } from './services/scheduled-transfer-controller.service';
import { KycVerificationControllerService } from './services/kyc-verification-controller.service';
import { CardControllerService } from './services/card-controller.service';
import { AccountLimitControllerService } from './services/account-limit-controller.service';
import { WithdrawalControllerService } from './services/withdrawal-controller.service';
import { WalletControllerService } from './services/wallet-controller.service';
import { UserProfileImageControllerService } from './services/user-profile-image-controller.service';
import { MoneyTransferControllerService } from './services/money-transfer-controller.service';
import { PaymentProcessingControllerService } from './services/payment-processing-controller.service';
import { OtpControllerService } from './services/otp-controller.service';
import { KeycloakEventsControllerService } from './services/keycloak-events-controller.service';
import { FlutterwaveControllerService } from './services/flutterwave-controller.service';
import { CountryControllerService } from './services/country-controller.service';
import { BeneficiaryAiSuggestionControllerService } from './services/beneficiary-ai-suggestion-controller.service';
import { UserBeneficiariesControllerService } from './services/user-beneficiaries-controller.service';
import { BankAccountControllerService } from './services/bank-account-controller.service';
import { TransactionReferenceControllerService } from './services/transaction-reference-controller.service';
import { StatementControllerService } from './services/statement-controller.service';
import { PingService } from './services/ping.service';
import { PayStackControllerService } from './services/pay-stack-controller.service';
import { PaymentMethodsControllerService } from './services/payment-methods-controller.service';
import { RedisHealthControllerService } from './services/redis-health-controller.service';
import { CountryPaymentMethodControllerService } from './services/country-payment-method-controller.service';
import { MyControllerService } from './services/my-controller.service';
import { CacheAdminControllerService } from './services/cache-admin-controller.service';
import { AdminControllerService } from './services/admin-controller.service';

/**
 * Module that provides all services and configuration.
 */
@NgModule({
  imports: [],
  exports: [],
  declarations: [],
  providers: [
    UserNotificationPreferencesControllerService,
    TransactionControllerService,
    ScheduledTransferControllerService,
    KycVerificationControllerService,
    CardControllerService,
    AccountLimitControllerService,
    WithdrawalControllerService,
    WalletControllerService,
    UserProfileImageControllerService,
    MoneyTransferControllerService,
    PaymentProcessingControllerService,
    OtpControllerService,
    KeycloakEventsControllerService,
    FlutterwaveControllerService,
    CountryControllerService,
    BeneficiaryAiSuggestionControllerService,
    UserBeneficiariesControllerService,
    BankAccountControllerService,
    TransactionReferenceControllerService,
    StatementControllerService,
    PingService,
    PayStackControllerService,
    PaymentMethodsControllerService,
    RedisHealthControllerService,
    CountryPaymentMethodControllerService,
    MyControllerService,
    CacheAdminControllerService,
    AdminControllerService,
    ApiConfiguration
  ],
})
export class ApiModule {
  static forRoot(params: ApiConfigurationParams): ModuleWithProviders<ApiModule> {
    return {
      ngModule: ApiModule,
      providers: [
        {
          provide: ApiConfiguration,
          useValue: params
        }
      ]
    }
  }

  constructor( 
    @Optional() @SkipSelf() parentModule: ApiModule,
    @Optional() http: HttpClient
  ) {
    if (parentModule) {
      throw new Error('ApiModule is already loaded. Import in your base AppModule only.');
    }
    if (!http) {
      throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
      'See also https://github.com/angular/angular/issues/20575');
    }
  }
}
