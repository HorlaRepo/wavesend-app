/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ApiResponseTransactionResponseDto } from '../models/api-response-transaction-response-dto';
import { createStripePayment } from '../fn/payment-processing-controller/create-stripe-payment';
import { CreateStripePayment$Params } from '../fn/payment-processing-controller/create-stripe-payment';
import { GenericResponseWithdrawalData } from '../models/generic-response-withdrawal-data';
import { handleStripeWebhook } from '../fn/payment-processing-controller/handle-stripe-webhook';
import { HandleStripeWebhook$Params } from '../fn/payment-processing-controller/handle-stripe-webhook';
import { handleWebhook } from '../fn/payment-processing-controller/handle-webhook';
import { HandleWebhook$Params } from '../fn/payment-processing-controller/handle-webhook';
import { PaymentResponse } from '../models/payment-response';
import { sendMoney } from '../fn/payment-processing-controller/send-money';
import { SendMoney$Params } from '../fn/payment-processing-controller/send-money';
import { withdraw1 } from '../fn/payment-processing-controller/withdraw-1';
import { Withdraw1$Params } from '../fn/payment-processing-controller/withdraw-1';

@Injectable({ providedIn: 'root' })
export class PaymentProcessingControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `withdraw1()` */
  static readonly Withdraw1Path = '/payment/withdraw';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `withdraw1()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  withdraw1$Response(params: Withdraw1$Params, context?: HttpContext): Observable<StrictHttpResponse<GenericResponseWithdrawalData>> {
    return withdraw1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `withdraw1$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  withdraw1(params: Withdraw1$Params, context?: HttpContext): Observable<GenericResponseWithdrawalData> {
    return this.withdraw1$Response(params, context).pipe(
      map((r: StrictHttpResponse<GenericResponseWithdrawalData>): GenericResponseWithdrawalData => r.body)
    );
  }

  /** Path part for operation `handleStripeWebhook()` */
  static readonly HandleStripeWebhookPath = '/payment/stripe-webhook';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `handleStripeWebhook()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  handleStripeWebhook$Response(params: HandleStripeWebhook$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return handleStripeWebhook(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `handleStripeWebhook$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  handleStripeWebhook(params: HandleStripeWebhook$Params, context?: HttpContext): Observable<string> {
    return this.handleStripeWebhook$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `sendMoney()` */
  static readonly SendMoneyPath = '/payment/send';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `sendMoney()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  sendMoney$Response(params: SendMoney$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseTransactionResponseDto>> {
    return sendMoney(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `sendMoney$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  sendMoney(params: SendMoney$Params, context?: HttpContext): Observable<ApiResponseTransactionResponseDto> {
    return this.sendMoney$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseTransactionResponseDto>): ApiResponseTransactionResponseDto => r.body)
    );
  }

  /** Path part for operation `handleWebhook()` */
  static readonly HandleWebhookPath = '/payment/flutterwave-webhook';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `handleWebhook()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  handleWebhook$Response(params: HandleWebhook$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return handleWebhook(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `handleWebhook$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  handleWebhook(params: HandleWebhook$Params, context?: HttpContext): Observable<string> {
    return this.handleWebhook$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `createStripePayment()` */
  static readonly CreateStripePaymentPath = '/payment/deposit';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createStripePayment()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createStripePayment$Response(params: CreateStripePayment$Params, context?: HttpContext): Observable<StrictHttpResponse<PaymentResponse>> {
    return createStripePayment(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createStripePayment$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createStripePayment(params: CreateStripePayment$Params, context?: HttpContext): Observable<PaymentResponse> {
    return this.createStripePayment$Response(params, context).pipe(
      map((r: StrictHttpResponse<PaymentResponse>): PaymentResponse => r.body)
    );
  }

}
