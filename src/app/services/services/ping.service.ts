/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { getCurrentAdminOrUser } from '../fn/ping/get-current-admin-or-user';
import { GetCurrentAdminOrUser$Params } from '../fn/ping/get-current-admin-or-user';
import { getCurrentUserDetails } from '../fn/ping/get-current-user-details';
import { GetCurrentUserDetails$Params } from '../fn/ping/get-current-user-details';
import { test } from '../fn/ping/test';
import { Test$Params } from '../fn/ping/test';
import { testKeyVault } from '../fn/ping/test-key-vault';
import { TestKeyVault$Params } from '../fn/ping/test-key-vault';

@Injectable({ providedIn: 'root' })
export class PingService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `testKeyVault()` */
  static readonly TestKeyVaultPath = '/test-keyvault';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `testKeyVault()` instead.
   *
   * This method doesn't expect any request body.
   */
  testKeyVault$Response(params?: TestKeyVault$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return testKeyVault(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `testKeyVault$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  testKeyVault(params?: TestKeyVault$Params, context?: HttpContext): Observable<string> {
    return this.testKeyVault$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `test()` */
  static readonly TestPath = '/ping';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `test()` instead.
   *
   * This method doesn't expect any request body.
   */
  test$Response(params?: Test$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return test(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `test$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  test(params?: Test$Params, context?: HttpContext): Observable<string> {
    return this.test$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `getCurrentUserDetails()` */
  static readonly GetCurrentUserDetailsPath = '/currentUser';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCurrentUserDetails()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCurrentUserDetails$Response(params?: GetCurrentUserDetails$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return getCurrentUserDetails(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCurrentUserDetails$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCurrentUserDetails(params?: GetCurrentUserDetails$Params, context?: HttpContext): Observable<string> {
    return this.getCurrentUserDetails$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `getCurrentAdminOrUser()` */
  static readonly GetCurrentAdminOrUserPath = '/currentAdminOrUser';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCurrentAdminOrUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCurrentAdminOrUser$Response(params?: GetCurrentAdminOrUser$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getCurrentAdminOrUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCurrentAdminOrUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCurrentAdminOrUser(params?: GetCurrentAdminOrUser$Params, context?: HttpContext): Observable<{
}> {
    return this.getCurrentAdminOrUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

}
