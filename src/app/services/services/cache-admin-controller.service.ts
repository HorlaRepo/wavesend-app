/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ApiResponseBoolean } from '../models/api-response-boolean';
import { ApiResponseMapStringMapStringObject } from '../models/api-response-map-string-map-string-object';
import { ApiResponseSetString } from '../models/api-response-set-string';
import { ApiResponseVoid } from '../models/api-response-void';
import { clearCache } from '../fn/cache-admin-controller/clear-cache';
import { ClearCache$Params } from '../fn/cache-admin-controller/clear-cache';
import { evictCacheKey } from '../fn/cache-admin-controller/evict-cache-key';
import { EvictCacheKey$Params } from '../fn/cache-admin-controller/evict-cache-key';
import { getCacheKeys } from '../fn/cache-admin-controller/get-cache-keys';
import { GetCacheKeys$Params } from '../fn/cache-admin-controller/get-cache-keys';
import { getCacheStats } from '../fn/cache-admin-controller/get-cache-stats';
import { GetCacheStats$Params } from '../fn/cache-admin-controller/get-cache-stats';

@Injectable({ providedIn: 'root' })
export class CacheAdminControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getCacheKeys()` */
  static readonly GetCacheKeysPath = '/api/admin/cache/{cacheName}/keys';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCacheKeys()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCacheKeys$Response(params: GetCacheKeys$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseSetString>> {
    return getCacheKeys(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCacheKeys$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCacheKeys(params: GetCacheKeys$Params, context?: HttpContext): Observable<ApiResponseSetString> {
    return this.getCacheKeys$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseSetString>): ApiResponseSetString => r.body)
    );
  }

  /** Path part for operation `getCacheStats()` */
  static readonly GetCacheStatsPath = '/api/admin/cache/stats';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCacheStats()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCacheStats$Response(params?: GetCacheStats$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseMapStringMapStringObject>> {
    return getCacheStats(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCacheStats$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCacheStats(params?: GetCacheStats$Params, context?: HttpContext): Observable<ApiResponseMapStringMapStringObject> {
    return this.getCacheStats$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseMapStringMapStringObject>): ApiResponseMapStringMapStringObject => r.body)
    );
  }

  /** Path part for operation `evictCacheKey()` */
  static readonly EvictCacheKeyPath = '/api/admin/cache/{cacheName}/keys/{key}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `evictCacheKey()` instead.
   *
   * This method doesn't expect any request body.
   */
  evictCacheKey$Response(params: EvictCacheKey$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseBoolean>> {
    return evictCacheKey(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `evictCacheKey$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  evictCacheKey(params: EvictCacheKey$Params, context?: HttpContext): Observable<ApiResponseBoolean> {
    return this.evictCacheKey$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseBoolean>): ApiResponseBoolean => r.body)
    );
  }

  /** Path part for operation `clearCache()` */
  static readonly ClearCachePath = '/api/admin/cache/{cacheName}/clear';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `clearCache()` instead.
   *
   * This method doesn't expect any request body.
   */
  clearCache$Response(params: ClearCache$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseVoid>> {
    return clearCache(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `clearCache$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  clearCache(params: ClearCache$Params, context?: HttpContext): Observable<ApiResponseVoid> {
    return this.clearCache$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseVoid>): ApiResponseVoid => r.body)
    );
  }

}
