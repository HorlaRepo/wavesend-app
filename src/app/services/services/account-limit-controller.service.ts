/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ApiResponseAccountLimitDto } from '../models/api-response-account-limit-dto';
import { ApiResponseVerificationLevel } from '../models/api-response-verification-level';
import { getLimitsForLevel } from '../fn/account-limit-controller/get-limits-for-level';
import { GetLimitsForLevel$Params } from '../fn/account-limit-controller/get-limits-for-level';
import { getMyAccountLimits } from '../fn/account-limit-controller/get-my-account-limits';
import { GetMyAccountLimits$Params } from '../fn/account-limit-controller/get-my-account-limits';
import { getMyVerificationLevel } from '../fn/account-limit-controller/get-my-verification-level';
import { GetMyVerificationLevel$Params } from '../fn/account-limit-controller/get-my-verification-level';
import { updateLimitsForLevel } from '../fn/account-limit-controller/update-limits-for-level';
import { UpdateLimitsForLevel$Params } from '../fn/account-limit-controller/update-limits-for-level';

@Injectable({ providedIn: 'root' })
export class AccountLimitControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getLimitsForLevel()` */
  static readonly GetLimitsForLevelPath = '/account-limits/level/{level}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getLimitsForLevel()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLimitsForLevel$Response(params: GetLimitsForLevel$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseAccountLimitDto>> {
    return getLimitsForLevel(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getLimitsForLevel$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLimitsForLevel(params: GetLimitsForLevel$Params, context?: HttpContext): Observable<ApiResponseAccountLimitDto> {
    return this.getLimitsForLevel$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseAccountLimitDto>): ApiResponseAccountLimitDto => r.body)
    );
  }

  /** Path part for operation `updateLimitsForLevel()` */
  static readonly UpdateLimitsForLevelPath = '/account-limits/level/{level}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateLimitsForLevel()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateLimitsForLevel$Response(params: UpdateLimitsForLevel$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseAccountLimitDto>> {
    return updateLimitsForLevel(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateLimitsForLevel$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateLimitsForLevel(params: UpdateLimitsForLevel$Params, context?: HttpContext): Observable<ApiResponseAccountLimitDto> {
    return this.updateLimitsForLevel$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseAccountLimitDto>): ApiResponseAccountLimitDto => r.body)
    );
  }

  /** Path part for operation `getMyVerificationLevel()` */
  static readonly GetMyVerificationLevelPath = '/account-limits/my-verification-level';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMyVerificationLevel()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMyVerificationLevel$Response(params?: GetMyVerificationLevel$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseVerificationLevel>> {
    return getMyVerificationLevel(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMyVerificationLevel$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMyVerificationLevel(params?: GetMyVerificationLevel$Params, context?: HttpContext): Observable<ApiResponseVerificationLevel> {
    return this.getMyVerificationLevel$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseVerificationLevel>): ApiResponseVerificationLevel => r.body)
    );
  }

  /** Path part for operation `getMyAccountLimits()` */
  static readonly GetMyAccountLimitsPath = '/account-limits/my-limits';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMyAccountLimits()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMyAccountLimits$Response(params?: GetMyAccountLimits$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseAccountLimitDto>> {
    return getMyAccountLimits(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMyAccountLimits$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMyAccountLimits(params?: GetMyAccountLimits$Params, context?: HttpContext): Observable<ApiResponseAccountLimitDto> {
    return this.getMyAccountLimits$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseAccountLimitDto>): ApiResponseAccountLimitDto => r.body)
    );
  }

}
