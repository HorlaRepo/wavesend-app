/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ApiResponseListTransactionResponse } from '../models/api-response-list-transaction-response';
import { ApiResponsePagedTransactionResponse } from '../models/api-response-paged-transaction-response';
import { ApiResponseTransactionFee } from '../models/api-response-transaction-fee';
import { ApiResponseTransactionResponse } from '../models/api-response-transaction-response';
import { getAllTransactions } from '../fn/transaction-controller/get-all-transactions';
import { GetAllTransactions$Params } from '../fn/transaction-controller/get-all-transactions';
import { getTransactionById } from '../fn/transaction-controller/get-transaction-by-id';
import { GetTransactionById$Params } from '../fn/transaction-controller/get-transaction-by-id';
import { getTransactionByReferenceNumber } from '../fn/transaction-controller/get-transaction-by-reference-number';
import { GetTransactionByReferenceNumber$Params } from '../fn/transaction-controller/get-transaction-by-reference-number';
import { getTransactionFee } from '../fn/transaction-controller/get-transaction-fee';
import { GetTransactionFee$Params } from '../fn/transaction-controller/get-transaction-fee';
import { getTransactionsByFilter } from '../fn/transaction-controller/get-transactions-by-filter';
import { GetTransactionsByFilter$Params } from '../fn/transaction-controller/get-transactions-by-filter';
import { getTransactionsByWallet } from '../fn/transaction-controller/get-transactions-by-wallet';
import { GetTransactionsByWallet$Params } from '../fn/transaction-controller/get-transactions-by-wallet';
import { getUserTransactionsBetweenDates } from '../fn/transaction-controller/get-user-transactions-between-dates';
import { GetUserTransactionsBetweenDates$Params } from '../fn/transaction-controller/get-user-transactions-between-dates';
import { searchTransactions } from '../fn/transaction-controller/search-transactions';
import { SearchTransactions$Params } from '../fn/transaction-controller/search-transactions';
import { updateTransaction } from '../fn/transaction-controller/update-transaction';
import { UpdateTransaction$Params } from '../fn/transaction-controller/update-transaction';
import { updateTransactionStatus } from '../fn/transaction-controller/update-transaction-status';
import { UpdateTransactionStatus$Params } from '../fn/transaction-controller/update-transaction-status';

@Injectable({ providedIn: 'root' })
export class TransactionControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateTransaction()` */
  static readonly UpdateTransactionPath = '/transactions/update/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateTransaction()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTransaction$Response(params: UpdateTransaction$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseTransactionResponse>> {
    return updateTransaction(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateTransaction$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTransaction(params: UpdateTransaction$Params, context?: HttpContext): Observable<ApiResponseTransactionResponse> {
    return this.updateTransaction$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseTransactionResponse>): ApiResponseTransactionResponse => r.body)
    );
  }

  /** Path part for operation `updateTransactionStatus()` */
  static readonly UpdateTransactionStatusPath = '/transactions/status/{referenceNumber}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateTransactionStatus()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTransactionStatus$Response(params: UpdateTransactionStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseTransactionResponse>> {
    return updateTransactionStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateTransactionStatus$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTransactionStatus(params: UpdateTransactionStatus$Params, context?: HttpContext): Observable<ApiResponseTransactionResponse> {
    return this.updateTransactionStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseTransactionResponse>): ApiResponseTransactionResponse => r.body)
    );
  }

  /** Path part for operation `getAllTransactions()` */
  static readonly GetAllTransactionsPath = '/transactions';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllTransactions()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllTransactions$Response(params?: GetAllTransactions$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponsePagedTransactionResponse>> {
    return getAllTransactions(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllTransactions$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllTransactions(params?: GetAllTransactions$Params, context?: HttpContext): Observable<ApiResponsePagedTransactionResponse> {
    return this.getAllTransactions$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponsePagedTransactionResponse>): ApiResponsePagedTransactionResponse => r.body)
    );
  }

  /** Path part for operation `getTransactionById()` */
  static readonly GetTransactionByIdPath = '/transactions/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTransactionById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTransactionById$Response(params: GetTransactionById$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseTransactionResponse>> {
    return getTransactionById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTransactionById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTransactionById(params: GetTransactionById$Params, context?: HttpContext): Observable<ApiResponseTransactionResponse> {
    return this.getTransactionById$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseTransactionResponse>): ApiResponseTransactionResponse => r.body)
    );
  }

  /** Path part for operation `getTransactionsByWallet()` */
  static readonly GetTransactionsByWalletPath = '/transactions/wallet/{walletId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTransactionsByWallet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTransactionsByWallet$Response(params: GetTransactionsByWallet$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponsePagedTransactionResponse>> {
    return getTransactionsByWallet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTransactionsByWallet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTransactionsByWallet(params: GetTransactionsByWallet$Params, context?: HttpContext): Observable<ApiResponsePagedTransactionResponse> {
    return this.getTransactionsByWallet$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponsePagedTransactionResponse>): ApiResponsePagedTransactionResponse => r.body)
    );
  }

  /** Path part for operation `getUserTransactionsBetweenDates()` */
  static readonly GetUserTransactionsBetweenDatesPath = '/transactions/wallet/{walletId}/sort';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserTransactionsBetweenDates()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserTransactionsBetweenDates$Response(params: GetUserTransactionsBetweenDates$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponsePagedTransactionResponse>> {
    return getUserTransactionsBetweenDates(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserTransactionsBetweenDates$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserTransactionsBetweenDates(params: GetUserTransactionsBetweenDates$Params, context?: HttpContext): Observable<ApiResponsePagedTransactionResponse> {
    return this.getUserTransactionsBetweenDates$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponsePagedTransactionResponse>): ApiResponsePagedTransactionResponse => r.body)
    );
  }

  /** Path part for operation `getTransactionsByFilter()` */
  static readonly GetTransactionsByFilterPath = '/transactions/wallet/{walletId}/filter';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTransactionsByFilter()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTransactionsByFilter$Response(params: GetTransactionsByFilter$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponsePagedTransactionResponse>> {
    return getTransactionsByFilter(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTransactionsByFilter$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTransactionsByFilter(params: GetTransactionsByFilter$Params, context?: HttpContext): Observable<ApiResponsePagedTransactionResponse> {
    return this.getTransactionsByFilter$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponsePagedTransactionResponse>): ApiResponsePagedTransactionResponse => r.body)
    );
  }

  /** Path part for operation `getTransactionFee()` */
  static readonly GetTransactionFeePath = '/transactions/transaction-fee';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTransactionFee()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTransactionFee$Response(params: GetTransactionFee$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseTransactionFee>> {
    return getTransactionFee(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTransactionFee$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTransactionFee(params: GetTransactionFee$Params, context?: HttpContext): Observable<ApiResponseTransactionFee> {
    return this.getTransactionFee$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseTransactionFee>): ApiResponseTransactionFee => r.body)
    );
  }

  /** Path part for operation `searchTransactions()` */
  static readonly SearchTransactionsPath = '/transactions/search';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `searchTransactions()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchTransactions$Response(params?: SearchTransactions$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponsePagedTransactionResponse>> {
    return searchTransactions(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `searchTransactions$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  searchTransactions(params?: SearchTransactions$Params, context?: HttpContext): Observable<ApiResponsePagedTransactionResponse> {
    return this.searchTransactions$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponsePagedTransactionResponse>): ApiResponsePagedTransactionResponse => r.body)
    );
  }

  /** Path part for operation `getTransactionByReferenceNumber()` */
  static readonly GetTransactionByReferenceNumberPath = '/transactions/reference/{referenceNumber}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTransactionByReferenceNumber()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTransactionByReferenceNumber$Response(params: GetTransactionByReferenceNumber$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseListTransactionResponse>> {
    return getTransactionByReferenceNumber(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTransactionByReferenceNumber$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTransactionByReferenceNumber(params: GetTransactionByReferenceNumber$Params, context?: HttpContext): Observable<ApiResponseListTransactionResponse> {
    return this.getTransactionByReferenceNumber$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseListTransactionResponse>): ApiResponseListTransactionResponse => r.body)
    );
  }

}
