/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addUserBeneficiary } from '../fn/user-beneficiaries-controller/add-user-beneficiary';
import { AddUserBeneficiary$Params } from '../fn/user-beneficiaries-controller/add-user-beneficiary';
import { ApiResponseString } from '../models/api-response-string';
import { ApiResponseUserBeneficiariesResponse } from '../models/api-response-user-beneficiaries-response';
import { ApiResponseUserBeneficiaryResponse } from '../models/api-response-user-beneficiary-response';
import { deleteUserBeneficiary } from '../fn/user-beneficiaries-controller/delete-user-beneficiary';
import { DeleteUserBeneficiary$Params } from '../fn/user-beneficiaries-controller/delete-user-beneficiary';
import { getUserBeneficiaries } from '../fn/user-beneficiaries-controller/get-user-beneficiaries';
import { GetUserBeneficiaries$Params } from '../fn/user-beneficiaries-controller/get-user-beneficiaries';
import { getUserBeneficiary } from '../fn/user-beneficiaries-controller/get-user-beneficiary';
import { GetUserBeneficiary$Params } from '../fn/user-beneficiaries-controller/get-user-beneficiary';

@Injectable({ providedIn: 'root' })
export class UserBeneficiariesControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `addUserBeneficiary()` */
  static readonly AddUserBeneficiaryPath = '/beneficiaries/add';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addUserBeneficiary()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addUserBeneficiary$Response(params: AddUserBeneficiary$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseUserBeneficiaryResponse>> {
    return addUserBeneficiary(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addUserBeneficiary$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addUserBeneficiary(params: AddUserBeneficiary$Params, context?: HttpContext): Observable<ApiResponseUserBeneficiaryResponse> {
    return this.addUserBeneficiary$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseUserBeneficiaryResponse>): ApiResponseUserBeneficiaryResponse => r.body)
    );
  }

  /** Path part for operation `getUserBeneficiaries()` */
  static readonly GetUserBeneficiariesPath = '/beneficiaries';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserBeneficiaries()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserBeneficiaries$Response(params?: GetUserBeneficiaries$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseUserBeneficiariesResponse>> {
    return getUserBeneficiaries(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserBeneficiaries$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserBeneficiaries(params?: GetUserBeneficiaries$Params, context?: HttpContext): Observable<ApiResponseUserBeneficiariesResponse> {
    return this.getUserBeneficiaries$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseUserBeneficiariesResponse>): ApiResponseUserBeneficiariesResponse => r.body)
    );
  }

  /** Path part for operation `getUserBeneficiary()` */
  static readonly GetUserBeneficiaryPath = '/beneficiaries/{beneficiaryId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserBeneficiary()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserBeneficiary$Response(params: GetUserBeneficiary$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseUserBeneficiaryResponse>> {
    return getUserBeneficiary(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserBeneficiary$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserBeneficiary(params: GetUserBeneficiary$Params, context?: HttpContext): Observable<ApiResponseUserBeneficiaryResponse> {
    return this.getUserBeneficiary$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseUserBeneficiaryResponse>): ApiResponseUserBeneficiaryResponse => r.body)
    );
  }

  /** Path part for operation `deleteUserBeneficiary()` */
  static readonly DeleteUserBeneficiaryPath = '/beneficiaries/{beneficiaryId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteUserBeneficiary()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteUserBeneficiary$Response(params: DeleteUserBeneficiary$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseString>> {
    return deleteUserBeneficiary(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteUserBeneficiary$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteUserBeneficiary(params: DeleteUserBeneficiary$Params, context?: HttpContext): Observable<ApiResponseString> {
    return this.deleteUserBeneficiary$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseString>): ApiResponseString => r.body)
    );
  }

}
