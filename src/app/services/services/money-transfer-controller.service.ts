/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ApiResponseTransactionResponseDto } from '../models/api-response-transaction-response-dto';
import { ApiResponseTransferInitiationResponse } from '../models/api-response-transfer-initiation-response';
import { initiateTransfer } from '../fn/money-transfer-controller/initiate-transfer';
import { InitiateTransfer$Params } from '../fn/money-transfer-controller/initiate-transfer';
import { verifyAndTransfer } from '../fn/money-transfer-controller/verify-and-transfer';
import { VerifyAndTransfer$Params } from '../fn/money-transfer-controller/verify-and-transfer';

@Injectable({ providedIn: 'root' })
export class MoneyTransferControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `verifyAndTransfer()` */
  static readonly VerifyAndTransferPath = '/transfers/verify';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `verifyAndTransfer()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  verifyAndTransfer$Response(params: VerifyAndTransfer$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseTransactionResponseDto>> {
    return verifyAndTransfer(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `verifyAndTransfer$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  verifyAndTransfer(params: VerifyAndTransfer$Params, context?: HttpContext): Observable<ApiResponseTransactionResponseDto> {
    return this.verifyAndTransfer$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseTransactionResponseDto>): ApiResponseTransactionResponseDto => r.body)
    );
  }

  /** Path part for operation `initiateTransfer()` */
  static readonly InitiateTransferPath = '/transfers/initiate';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `initiateTransfer()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  initiateTransfer$Response(params: InitiateTransfer$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseTransferInitiationResponse>> {
    return initiateTransfer(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `initiateTransfer$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  initiateTransfer(params: InitiateTransfer$Params, context?: HttpContext): Observable<ApiResponseTransferInitiationResponse> {
    return this.initiateTransfer$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseTransferInitiationResponse>): ApiResponseTransferInitiationResponse => r.body)
    );
  }

}
