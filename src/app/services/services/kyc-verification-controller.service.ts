/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ApiResponseKycVerification } from '../models/api-response-kyc-verification';
import { ApiResponseString } from '../models/api-response-string';
import { approveAddressVerification } from '../fn/kyc-verification-controller/approve-address-verification';
import { ApproveAddressVerification$Params } from '../fn/kyc-verification-controller/approve-address-verification';
import { approveIdVerification } from '../fn/kyc-verification-controller/approve-id-verification';
import { ApproveIdVerification$Params } from '../fn/kyc-verification-controller/approve-id-verification';
import { getKycStatus } from '../fn/kyc-verification-controller/get-kyc-status';
import { GetKycStatus$Params } from '../fn/kyc-verification-controller/get-kyc-status';
import { rejectAddressVerification } from '../fn/kyc-verification-controller/reject-address-verification';
import { RejectAddressVerification$Params } from '../fn/kyc-verification-controller/reject-address-verification';
import { rejectIdVerification } from '../fn/kyc-verification-controller/reject-id-verification';
import { RejectIdVerification$Params } from '../fn/kyc-verification-controller/reject-id-verification';
import { uploadAddressDocument } from '../fn/kyc-verification-controller/upload-address-document';
import { UploadAddressDocument$Params } from '../fn/kyc-verification-controller/upload-address-document';
import { uploadIdDocument } from '../fn/kyc-verification-controller/upload-id-document';
import { UploadIdDocument$Params } from '../fn/kyc-verification-controller/upload-id-document';

@Injectable({ providedIn: 'root' })
export class KycVerificationControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `rejectIdVerification()` */
  static readonly RejectIdVerificationPath = '/kyc-verification/reject-id-verification';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `rejectIdVerification()` instead.
   *
   * This method doesn't expect any request body.
   */
  rejectIdVerification$Response(params: RejectIdVerification$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseString>> {
    return rejectIdVerification(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `rejectIdVerification$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  rejectIdVerification(params: RejectIdVerification$Params, context?: HttpContext): Observable<ApiResponseString> {
    return this.rejectIdVerification$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseString>): ApiResponseString => r.body)
    );
  }

  /** Path part for operation `rejectAddressVerification()` */
  static readonly RejectAddressVerificationPath = '/kyc-verification/reject-address-verification';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `rejectAddressVerification()` instead.
   *
   * This method doesn't expect any request body.
   */
  rejectAddressVerification$Response(params: RejectAddressVerification$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseString>> {
    return rejectAddressVerification(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `rejectAddressVerification$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  rejectAddressVerification(params: RejectAddressVerification$Params, context?: HttpContext): Observable<ApiResponseString> {
    return this.rejectAddressVerification$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseString>): ApiResponseString => r.body)
    );
  }

  /** Path part for operation `approveIdVerification()` */
  static readonly ApproveIdVerificationPath = '/kyc-verification/approve-id-verification';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `approveIdVerification()` instead.
   *
   * This method doesn't expect any request body.
   */
  approveIdVerification$Response(params: ApproveIdVerification$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseString>> {
    return approveIdVerification(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `approveIdVerification$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  approveIdVerification(params: ApproveIdVerification$Params, context?: HttpContext): Observable<ApiResponseString> {
    return this.approveIdVerification$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseString>): ApiResponseString => r.body)
    );
  }

  /** Path part for operation `approveAddressVerification()` */
  static readonly ApproveAddressVerificationPath = '/kyc-verification/approve-address-verification';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `approveAddressVerification()` instead.
   *
   * This method doesn't expect any request body.
   */
  approveAddressVerification$Response(params: ApproveAddressVerification$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseString>> {
    return approveAddressVerification(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `approveAddressVerification$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  approveAddressVerification(params: ApproveAddressVerification$Params, context?: HttpContext): Observable<ApiResponseString> {
    return this.approveAddressVerification$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseString>): ApiResponseString => r.body)
    );
  }

  /** Path part for operation `uploadIdDocument()` */
  static readonly UploadIdDocumentPath = '/kyc-verification/id-document';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadIdDocument()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadIdDocument$Response(params?: UploadIdDocument$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseString>> {
    return uploadIdDocument(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadIdDocument$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadIdDocument(params?: UploadIdDocument$Params, context?: HttpContext): Observable<ApiResponseString> {
    return this.uploadIdDocument$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseString>): ApiResponseString => r.body)
    );
  }

  /** Path part for operation `uploadAddressDocument()` */
  static readonly UploadAddressDocumentPath = '/kyc-verification/address-document';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadAddressDocument()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadAddressDocument$Response(params?: UploadAddressDocument$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseString>> {
    return uploadAddressDocument(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadAddressDocument$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadAddressDocument(params?: UploadAddressDocument$Params, context?: HttpContext): Observable<ApiResponseString> {
    return this.uploadAddressDocument$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseString>): ApiResponseString => r.body)
    );
  }

  /** Path part for operation `getKycStatus()` */
  static readonly GetKycStatusPath = '/kyc-verification/status';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getKycStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  getKycStatus$Response(params?: GetKycStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseKycVerification>> {
    return getKycStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getKycStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getKycStatus(params?: GetKycStatus$Params, context?: HttpContext): Observable<ApiResponseKycVerification> {
    return this.getKycStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseKycVerification>): ApiResponseKycVerification => r.body)
    );
  }

}
