/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ApiResponseListScheduledTransferResponseDto } from '../models/api-response-list-scheduled-transfer-response-dto';
import { ApiResponsePageResponseScheduledTransferResponseDto } from '../models/api-response-page-response-scheduled-transfer-response-dto';
import { ApiResponseScheduledTransferInitiationResponse } from '../models/api-response-scheduled-transfer-initiation-response';
import { ApiResponseScheduledTransferResponseDto } from '../models/api-response-scheduled-transfer-response-dto';
import { cancelRecurringSeries } from '../fn/scheduled-transfer-controller/cancel-recurring-series';
import { CancelRecurringSeries$Params } from '../fn/scheduled-transfer-controller/cancel-recurring-series';
import { cancelTransfer } from '../fn/scheduled-transfer-controller/cancel-transfer';
import { CancelTransfer$Params } from '../fn/scheduled-transfer-controller/cancel-transfer';
import { getAllUserTransfers } from '../fn/scheduled-transfer-controller/get-all-user-transfers';
import { GetAllUserTransfers$Params } from '../fn/scheduled-transfer-controller/get-all-user-transfers';
import { getRecurringSeries } from '../fn/scheduled-transfer-controller/get-recurring-series';
import { GetRecurringSeries$Params } from '../fn/scheduled-transfer-controller/get-recurring-series';
import { getUserTransfers } from '../fn/scheduled-transfer-controller/get-user-transfers';
import { GetUserTransfers$Params } from '../fn/scheduled-transfer-controller/get-user-transfers';
import { initiateScheduleTransfer } from '../fn/scheduled-transfer-controller/initiate-schedule-transfer';
import { InitiateScheduleTransfer$Params } from '../fn/scheduled-transfer-controller/initiate-schedule-transfer';
import { scheduleTransfer } from '../fn/scheduled-transfer-controller/schedule-transfer';
import { ScheduleTransfer$Params } from '../fn/scheduled-transfer-controller/schedule-transfer';
import { updateTransfer } from '../fn/scheduled-transfer-controller/update-transfer';
import { UpdateTransfer$Params } from '../fn/scheduled-transfer-controller/update-transfer';
import { verifyAndScheduleTransfer } from '../fn/scheduled-transfer-controller/verify-and-schedule-transfer';
import { VerifyAndScheduleTransfer$Params } from '../fn/scheduled-transfer-controller/verify-and-schedule-transfer';

@Injectable({ providedIn: 'root' })
export class ScheduledTransferControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateTransfer()` */
  static readonly UpdateTransferPath = '/scheduled-transfers/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateTransfer()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTransfer$Response(params: UpdateTransfer$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseScheduledTransferResponseDto>> {
    return updateTransfer(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateTransfer$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTransfer(params: UpdateTransfer$Params, context?: HttpContext): Observable<ApiResponseScheduledTransferResponseDto> {
    return this.updateTransfer$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseScheduledTransferResponseDto>): ApiResponseScheduledTransferResponseDto => r.body)
    );
  }

  /** Path part for operation `cancelTransfer()` */
  static readonly CancelTransferPath = '/scheduled-transfers/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `cancelTransfer()` instead.
   *
   * This method doesn't expect any request body.
   */
  cancelTransfer$Response(params: CancelTransfer$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseScheduledTransferResponseDto>> {
    return cancelTransfer(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `cancelTransfer$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  cancelTransfer(params: CancelTransfer$Params, context?: HttpContext): Observable<ApiResponseScheduledTransferResponseDto> {
    return this.cancelTransfer$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseScheduledTransferResponseDto>): ApiResponseScheduledTransferResponseDto => r.body)
    );
  }

  /** Path part for operation `verifyAndScheduleTransfer()` */
  static readonly VerifyAndScheduleTransferPath = '/scheduled-transfers/verify';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `verifyAndScheduleTransfer()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  verifyAndScheduleTransfer$Response(params: VerifyAndScheduleTransfer$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseScheduledTransferResponseDto>> {
    return verifyAndScheduleTransfer(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `verifyAndScheduleTransfer$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  verifyAndScheduleTransfer(params: VerifyAndScheduleTransfer$Params, context?: HttpContext): Observable<ApiResponseScheduledTransferResponseDto> {
    return this.verifyAndScheduleTransfer$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseScheduledTransferResponseDto>): ApiResponseScheduledTransferResponseDto => r.body)
    );
  }

  /** Path part for operation `scheduleTransfer()` */
  static readonly ScheduleTransferPath = '/scheduled-transfers/schedule';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `scheduleTransfer()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  scheduleTransfer$Response(params: ScheduleTransfer$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseScheduledTransferResponseDto>> {
    return scheduleTransfer(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `scheduleTransfer$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  scheduleTransfer(params: ScheduleTransfer$Params, context?: HttpContext): Observable<ApiResponseScheduledTransferResponseDto> {
    return this.scheduleTransfer$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseScheduledTransferResponseDto>): ApiResponseScheduledTransferResponseDto => r.body)
    );
  }

  /** Path part for operation `initiateScheduleTransfer()` */
  static readonly InitiateScheduleTransferPath = '/scheduled-transfers/initiate';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `initiateScheduleTransfer()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  initiateScheduleTransfer$Response(params: InitiateScheduleTransfer$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseScheduledTransferInitiationResponse>> {
    return initiateScheduleTransfer(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `initiateScheduleTransfer$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  initiateScheduleTransfer(params: InitiateScheduleTransfer$Params, context?: HttpContext): Observable<ApiResponseScheduledTransferInitiationResponse> {
    return this.initiateScheduleTransfer$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseScheduledTransferInitiationResponse>): ApiResponseScheduledTransferInitiationResponse => r.body)
    );
  }

  /** Path part for operation `getUserTransfers()` */
  static readonly GetUserTransfersPath = '/scheduled-transfers';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserTransfers()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserTransfers$Response(params?: GetUserTransfers$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponsePageResponseScheduledTransferResponseDto>> {
    return getUserTransfers(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserTransfers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserTransfers(params?: GetUserTransfers$Params, context?: HttpContext): Observable<ApiResponsePageResponseScheduledTransferResponseDto> {
    return this.getUserTransfers$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponsePageResponseScheduledTransferResponseDto>): ApiResponsePageResponseScheduledTransferResponseDto => r.body)
    );
  }

  /** Path part for operation `getRecurringSeries()` */
  static readonly GetRecurringSeriesPath = '/scheduled-transfers/recurring/{parentId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getRecurringSeries()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRecurringSeries$Response(params: GetRecurringSeries$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseListScheduledTransferResponseDto>> {
    return getRecurringSeries(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getRecurringSeries$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRecurringSeries(params: GetRecurringSeries$Params, context?: HttpContext): Observable<ApiResponseListScheduledTransferResponseDto> {
    return this.getRecurringSeries$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseListScheduledTransferResponseDto>): ApiResponseListScheduledTransferResponseDto => r.body)
    );
  }

  /** Path part for operation `cancelRecurringSeries()` */
  static readonly CancelRecurringSeriesPath = '/scheduled-transfers/recurring/{parentId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `cancelRecurringSeries()` instead.
   *
   * This method doesn't expect any request body.
   */
  cancelRecurringSeries$Response(params: CancelRecurringSeries$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseScheduledTransferResponseDto>> {
    return cancelRecurringSeries(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `cancelRecurringSeries$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  cancelRecurringSeries(params: CancelRecurringSeries$Params, context?: HttpContext): Observable<ApiResponseScheduledTransferResponseDto> {
    return this.cancelRecurringSeries$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseScheduledTransferResponseDto>): ApiResponseScheduledTransferResponseDto => r.body)
    );
  }

  /** Path part for operation `getAllUserTransfers()` */
  static readonly GetAllUserTransfersPath = '/scheduled-transfers/all';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllUserTransfers()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUserTransfers$Response(params?: GetAllUserTransfers$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseListScheduledTransferResponseDto>> {
    return getAllUserTransfers(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllUserTransfers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUserTransfers(params?: GetAllUserTransfers$Params, context?: HttpContext): Observable<ApiResponseListScheduledTransferResponseDto> {
    return this.getAllUserTransfers$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseListScheduledTransferResponseDto>): ApiResponseListScheduledTransferResponseDto => r.body)
    );
  }

}
