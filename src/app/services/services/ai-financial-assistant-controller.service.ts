/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ApiResponseString } from '../models/api-response-string';
import { ApiResponseVoid } from '../models/api-response-void';
import { clearConversation } from '../fn/ai-financial-assistant-controller/clear-conversation';
import { ClearConversation$Params } from '../fn/ai-financial-assistant-controller/clear-conversation';
import { processMessage } from '../fn/ai-financial-assistant-controller/process-message';
import { ProcessMessage$Params } from '../fn/ai-financial-assistant-controller/process-message';

@Injectable({ providedIn: 'root' })
export class AiFinancialAssistantControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `processMessage()` */
  static readonly ProcessMessagePath = '/ai-assistant/message';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `processMessage()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  processMessage$Response(params: ProcessMessage$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseString>> {
    return processMessage(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `processMessage$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  processMessage(params: ProcessMessage$Params, context?: HttpContext): Observable<ApiResponseString> {
    return this.processMessage$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseString>): ApiResponseString => r.body)
    );
  }

  /** Path part for operation `clearConversation()` */
  static readonly ClearConversationPath = '/ai-assistant/conversation';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `clearConversation()` instead.
   *
   * This method doesn't expect any request body.
   */
  clearConversation$Response(params?: ClearConversation$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseVoid>> {
    return clearConversation(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `clearConversation$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  clearConversation(params?: ClearConversation$Params, context?: HttpContext): Observable<ApiResponseVoid> {
    return this.clearConversation$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseVoid>): ApiResponseVoid => r.body)
    );
  }

}
