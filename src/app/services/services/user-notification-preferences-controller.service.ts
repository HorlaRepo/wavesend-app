/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ApiResponseUserNotificationPreferences } from '../models/api-response-user-notification-preferences';
import { getNotificationPreferences } from '../fn/user-notification-preferences-controller/get-notification-preferences';
import { GetNotificationPreferences$Params } from '../fn/user-notification-preferences-controller/get-notification-preferences';
import { updateNotificationPreferences } from '../fn/user-notification-preferences-controller/update-notification-preferences';
import { UpdateNotificationPreferences$Params } from '../fn/user-notification-preferences-controller/update-notification-preferences';

@Injectable({ providedIn: 'root' })
export class UserNotificationPreferencesControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateNotificationPreferences()` */
  static readonly UpdateNotificationPreferencesPath = '/user-notification-preferences/update';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateNotificationPreferences()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateNotificationPreferences$Response(params: UpdateNotificationPreferences$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseUserNotificationPreferences>> {
    return updateNotificationPreferences(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateNotificationPreferences$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateNotificationPreferences(params: UpdateNotificationPreferences$Params, context?: HttpContext): Observable<ApiResponseUserNotificationPreferences> {
    return this.updateNotificationPreferences$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseUserNotificationPreferences>): ApiResponseUserNotificationPreferences => r.body)
    );
  }

  /** Path part for operation `getNotificationPreferences()` */
  static readonly GetNotificationPreferencesPath = '/user-notification-preferences';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getNotificationPreferences()` instead.
   *
   * This method doesn't expect any request body.
   */
  getNotificationPreferences$Response(params?: GetNotificationPreferences$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseUserNotificationPreferences>> {
    return getNotificationPreferences(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getNotificationPreferences$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getNotificationPreferences(params?: GetNotificationPreferences$Params, context?: HttpContext): Observable<ApiResponseUserNotificationPreferences> {
    return this.getNotificationPreferences$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseUserNotificationPreferences>): ApiResponseUserNotificationPreferences => r.body)
    );
  }

}
