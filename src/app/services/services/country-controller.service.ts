/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addNewCountry } from '../fn/country-controller/add-new-country';
import { AddNewCountry$Params } from '../fn/country-controller/add-new-country';
import { ApiResponseCountry } from '../models/api-response-country';
import { ApiResponseListCountry } from '../models/api-response-list-country';
import { ApiResponseSetMobileMoneyOption } from '../models/api-response-set-mobile-money-option';
import { getAllMobileMoneyOptions } from '../fn/country-controller/get-all-mobile-money-options';
import { GetAllMobileMoneyOptions$Params } from '../fn/country-controller/get-all-mobile-money-options';
import { getAllSupportedCountries } from '../fn/country-controller/get-all-supported-countries';
import { GetAllSupportedCountries$Params } from '../fn/country-controller/get-all-supported-countries';
import { getCountryByName } from '../fn/country-controller/get-country-by-name';
import { GetCountryByName$Params } from '../fn/country-controller/get-country-by-name';

@Injectable({ providedIn: 'root' })
export class CountryControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAllSupportedCountries()` */
  static readonly GetAllSupportedCountriesPath = '/countries';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllSupportedCountries()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllSupportedCountries$Response(params?: GetAllSupportedCountries$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseListCountry>> {
    return getAllSupportedCountries(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllSupportedCountries$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllSupportedCountries(params?: GetAllSupportedCountries$Params, context?: HttpContext): Observable<ApiResponseListCountry> {
    return this.getAllSupportedCountries$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseListCountry>): ApiResponseListCountry => r.body)
    );
  }

  /** Path part for operation `addNewCountry()` */
  static readonly AddNewCountryPath = '/countries';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addNewCountry()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addNewCountry$Response(params: AddNewCountry$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseCountry>> {
    return addNewCountry(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addNewCountry$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addNewCountry(params: AddNewCountry$Params, context?: HttpContext): Observable<ApiResponseCountry> {
    return this.addNewCountry$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseCountry>): ApiResponseCountry => r.body)
    );
  }

  /** Path part for operation `getCountryByName()` */
  static readonly GetCountryByNamePath = '/countries/{countryName}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCountryByName()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCountryByName$Response(params: GetCountryByName$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseCountry>> {
    return getCountryByName(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCountryByName$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCountryByName(params: GetCountryByName$Params, context?: HttpContext): Observable<ApiResponseCountry> {
    return this.getCountryByName$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseCountry>): ApiResponseCountry => r.body)
    );
  }

  /** Path part for operation `getAllMobileMoneyOptions()` */
  static readonly GetAllMobileMoneyOptionsPath = '/countries/mobile-money-options/{acronym}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllMobileMoneyOptions()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllMobileMoneyOptions$Response(params: GetAllMobileMoneyOptions$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseSetMobileMoneyOption>> {
    return getAllMobileMoneyOptions(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllMobileMoneyOptions$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllMobileMoneyOptions(params: GetAllMobileMoneyOptions$Params, context?: HttpContext): Observable<ApiResponseSetMobileMoneyOption> {
    return this.getAllMobileMoneyOptions$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseSetMobileMoneyOption>): ApiResponseSetMobileMoneyOption => r.body)
    );
  }

}
