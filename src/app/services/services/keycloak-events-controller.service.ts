/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ApiResponseUserRepresentation } from '../models/api-response-user-representation';
import { checkUser } from '../fn/keycloak-events-controller/check-user';
import { CheckUser$Params } from '../fn/keycloak-events-controller/check-user';
import { receiveEvent } from '../fn/keycloak-events-controller/receive-event';
import { ReceiveEvent$Params } from '../fn/keycloak-events-controller/receive-event';

@Injectable({ providedIn: 'root' })
export class KeycloakEventsControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `receiveEvent()` */
  static readonly ReceiveEventPath = '/keycloak/events';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `receiveEvent()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  receiveEvent$Response(params: ReceiveEvent$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return receiveEvent(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `receiveEvent$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  receiveEvent(params: ReceiveEvent$Params, context?: HttpContext): Observable<string> {
    return this.receiveEvent$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `checkUser()` */
  static readonly CheckUserPath = '/keycloak/check-user';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `checkUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  checkUser$Response(params: CheckUser$Params, context?: HttpContext): Observable<StrictHttpResponse<ApiResponseUserRepresentation>> {
    return checkUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `checkUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  checkUser(params: CheckUser$Params, context?: HttpContext): Observable<ApiResponseUserRepresentation> {
    return this.checkUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<ApiResponseUserRepresentation>): ApiResponseUserRepresentation => r.body)
    );
  }

}
