/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { GenericResponseWithdrawalData } from '../models/generic-response-withdrawal-data';
import { GenericResponseWithdrawalInitiationResponse } from '../models/generic-response-withdrawal-initiation-response';
import { initiateWithdrawal } from '../fn/withdrawal-controller/initiate-withdrawal';
import { InitiateWithdrawal$Params } from '../fn/withdrawal-controller/initiate-withdrawal';
import { verifyAndWithdraw } from '../fn/withdrawal-controller/verify-and-withdraw';
import { VerifyAndWithdraw$Params } from '../fn/withdrawal-controller/verify-and-withdraw';
import { withdraw } from '../fn/withdrawal-controller/withdraw';
import { Withdraw$Params } from '../fn/withdrawal-controller/withdraw';

@Injectable({ providedIn: 'root' })
export class WithdrawalControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `withdraw()` */
  static readonly WithdrawPath = '/withdrawals';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `withdraw()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  withdraw$Response(params: Withdraw$Params, context?: HttpContext): Observable<StrictHttpResponse<GenericResponseWithdrawalData>> {
    return withdraw(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `withdraw$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  withdraw(params: Withdraw$Params, context?: HttpContext): Observable<GenericResponseWithdrawalData> {
    return this.withdraw$Response(params, context).pipe(
      map((r: StrictHttpResponse<GenericResponseWithdrawalData>): GenericResponseWithdrawalData => r.body)
    );
  }

  /** Path part for operation `verifyAndWithdraw()` */
  static readonly VerifyAndWithdrawPath = '/withdrawals/verify';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `verifyAndWithdraw()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  verifyAndWithdraw$Response(params: VerifyAndWithdraw$Params, context?: HttpContext): Observable<StrictHttpResponse<GenericResponseWithdrawalData>> {
    return verifyAndWithdraw(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `verifyAndWithdraw$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  verifyAndWithdraw(params: VerifyAndWithdraw$Params, context?: HttpContext): Observable<GenericResponseWithdrawalData> {
    return this.verifyAndWithdraw$Response(params, context).pipe(
      map((r: StrictHttpResponse<GenericResponseWithdrawalData>): GenericResponseWithdrawalData => r.body)
    );
  }

  /** Path part for operation `initiateWithdrawal()` */
  static readonly InitiateWithdrawalPath = '/withdrawals/initiate';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `initiateWithdrawal()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  initiateWithdrawal$Response(params: InitiateWithdrawal$Params, context?: HttpContext): Observable<StrictHttpResponse<GenericResponseWithdrawalInitiationResponse>> {
    return initiateWithdrawal(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `initiateWithdrawal$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  initiateWithdrawal(params: InitiateWithdrawal$Params, context?: HttpContext): Observable<GenericResponseWithdrawalInitiationResponse> {
    return this.initiateWithdrawal$Response(params, context).pipe(
      map((r: StrictHttpResponse<GenericResponseWithdrawalInitiationResponse>): GenericResponseWithdrawalInitiationResponse => r.body)
    );
  }

}
