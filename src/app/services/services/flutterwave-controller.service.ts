/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addBeneficiary } from '../fn/flutterwave-controller/add-beneficiary';
import { AddBeneficiary$Params } from '../fn/flutterwave-controller/add-beneficiary';
import { ExchangeRateResponse } from '../models/exchange-rate-response';
import { FlutterwaveResponse } from '../models/flutterwave-response';
import { GenericResponseBeneficiary } from '../models/generic-response-beneficiary';
import { GenericResponseListFeeData } from '../models/generic-response-list-fee-data';
import { GenericResponseWithdrawalData } from '../models/generic-response-withdrawal-data';
import { getBanks } from '../fn/flutterwave-controller/get-banks';
import { GetBanks$Params } from '../fn/flutterwave-controller/get-banks';
import { getExchangeRate } from '../fn/flutterwave-controller/get-exchange-rate';
import { GetExchangeRate$Params } from '../fn/flutterwave-controller/get-exchange-rate';
import { getFees } from '../fn/flutterwave-controller/get-fees';
import { GetFees$Params } from '../fn/flutterwave-controller/get-fees';
import { handleWebhook1 } from '../fn/flutterwave-controller/handle-webhook-1';
import { HandleWebhook1$Params } from '../fn/flutterwave-controller/handle-webhook-1';
import { withdraw2 } from '../fn/flutterwave-controller/withdraw-2';
import { Withdraw2$Params } from '../fn/flutterwave-controller/withdraw-2';

@Injectable({ providedIn: 'root' })
export class FlutterwaveControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `withdraw2()` */
  static readonly Withdraw2Path = '/flutter/withdraw';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `withdraw2()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  withdraw2$Response(params: Withdraw2$Params, context?: HttpContext): Observable<StrictHttpResponse<GenericResponseWithdrawalData>> {
    return withdraw2(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `withdraw2$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  withdraw2(params: Withdraw2$Params, context?: HttpContext): Observable<GenericResponseWithdrawalData> {
    return this.withdraw2$Response(params, context).pipe(
      map((r: StrictHttpResponse<GenericResponseWithdrawalData>): GenericResponseWithdrawalData => r.body)
    );
  }

  /** Path part for operation `handleWebhook1()` */
  static readonly HandleWebhook1Path = '/flutter/webhook';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `handleWebhook1()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  handleWebhook1$Response(params: HandleWebhook1$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return handleWebhook1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `handleWebhook1$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  handleWebhook1(params: HandleWebhook1$Params, context?: HttpContext): Observable<string> {
    return this.handleWebhook1$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `addBeneficiary()` */
  static readonly AddBeneficiaryPath = '/flutter/beneficiaries';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addBeneficiary()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addBeneficiary$Response(params: AddBeneficiary$Params, context?: HttpContext): Observable<StrictHttpResponse<GenericResponseBeneficiary>> {
    return addBeneficiary(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addBeneficiary$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addBeneficiary(params: AddBeneficiary$Params, context?: HttpContext): Observable<GenericResponseBeneficiary> {
    return this.addBeneficiary$Response(params, context).pipe(
      map((r: StrictHttpResponse<GenericResponseBeneficiary>): GenericResponseBeneficiary => r.body)
    );
  }

  /** Path part for operation `getExchangeRate()` */
  static readonly GetExchangeRatePath = '/flutter/rates';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getExchangeRate()` instead.
   *
   * This method doesn't expect any request body.
   */
  getExchangeRate$Response(params: GetExchangeRate$Params, context?: HttpContext): Observable<StrictHttpResponse<ExchangeRateResponse>> {
    return getExchangeRate(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getExchangeRate$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getExchangeRate(params: GetExchangeRate$Params, context?: HttpContext): Observable<ExchangeRateResponse> {
    return this.getExchangeRate$Response(params, context).pipe(
      map((r: StrictHttpResponse<ExchangeRateResponse>): ExchangeRateResponse => r.body)
    );
  }

  /** Path part for operation `getFees()` */
  static readonly GetFeesPath = '/flutter/fees';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getFees()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFees$Response(params: GetFees$Params, context?: HttpContext): Observable<StrictHttpResponse<GenericResponseListFeeData>> {
    return getFees(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getFees$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFees(params: GetFees$Params, context?: HttpContext): Observable<GenericResponseListFeeData> {
    return this.getFees$Response(params, context).pipe(
      map((r: StrictHttpResponse<GenericResponseListFeeData>): GenericResponseListFeeData => r.body)
    );
  }

  /** Path part for operation `getBanks()` */
  static readonly GetBanksPath = '/flutter/banks/{country}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getBanks()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBanks$Response(params: GetBanks$Params, context?: HttpContext): Observable<StrictHttpResponse<FlutterwaveResponse>> {
    return getBanks(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getBanks$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBanks(params: GetBanks$Params, context?: HttpContext): Observable<FlutterwaveResponse> {
    return this.getBanks$Response(params, context).pipe(
      map((r: StrictHttpResponse<FlutterwaveResponse>): FlutterwaveResponse => r.body)
    );
  }

}
